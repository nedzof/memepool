Memepire Platform Development Guidelines

Core Development Principles
- Write clean, maintainable, and self-documenting code
- Follow DRY (Don't Repeat Yourself) principle
- Implement SOLID principles in object-oriented design
- Create modular, reusable components and functions
- Prioritize code readability and maintainability

Technical Standards
1. Code Quality
   - TypeScript for type safety
   - ESLint for code linting
   - Prettier for consistent formatting
   - Strict typing with interfaces and type definitions
   - Comprehensive error handling and logging

2. Architecture & Design
   - Component-based architecture
   - Clear separation of concerns
   - Dependency injection where appropriate
   - Proper state management
   - Scalable and maintainable design patterns

3. Security & Performance
   - Input validation and data sanitization
   - Authentication and authorization implementation
   - Security best practices and vulnerability prevention
   - Performance optimization
   - Caching strategies
   - Memory management

4. Testing Strategy
   - Unit tests for utilities and functions
   - Integration tests for components
   - E2E tests for critical user flows
   - Test coverage requirements
   - Automated testing in CI pipeline

5. Version Control & Deployment
   - Feature branch workflow
   - Pull request reviews required
   - Semantic versioning
   - Continuous integration practices
   - Environment-specific configurations
   - Automated deployment pipelines

6. Documentation Requirements
   - Code comments for complex logic
   - API documentation with examples
   - Component documentation
   - Setup and deployment guides
   - Architecture diagrams
   - Database schemas

7. Database & API Design
   - RESTful API principles
   - Proper database indexing
   - Data migration strategies
   - Backup and recovery procedures
   - API versioning
   - Clear API contracts

8. Frontend Development
   - Responsive design principles
   - Accessibility compliance (WCAG)
   - Component reusability
   - UI/UX consistency
   - Performance optimization

9. Monitoring & Maintenance
   - Logging strategy
   - Error tracking
   - Performance monitoring
   - Dependency management
   - Security updates
   - Regular code audits

Best Practices for AI-Assisted Development
- Provide clear context and requirements
- Include relevant code snippets and examples
- Specify architectural constraints
- Reference existing patterns in the codebase
- Define expected inputs and outputs
- Mention error handling requirements
- Include performance expectations
- Specify testing requirements
