export default class HTTPWalletJSON {
    baseUrl;
    httpClient;
    originator;
    api;
    constructor(originator, baseUrl = 'http://localhost:3321', httpClient = fetch) {
        this.baseUrl = baseUrl;
        this.originator = originator;
        this.httpClient = httpClient;
        this.api = async (call, args) => {
            try {
                const response = await (await httpClient(`${this.baseUrl}/${call}`, {
                    method: 'POST',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                        'Originator': this.originator
                    },
                    body: JSON.stringify(args)
                })).json();
                return response;
            }
            catch (error) {
                console.log({ 'HTTPWalletJSON': { call, args, error } });
                throw error;
            }
        };
    }
    async createAction(args) {
        return await this.api('createAction', args);
    }
    async signAction(args) {
        return await this.api('signAction', args);
    }
    async abortAction(args) {
        return await this.api('abortAction', args);
    }
    async listActions(args) {
        return await this.api('listActions', args);
    }
    async internalizeAction(args) {
        return await this.api('internalizeAction', args);
    }
    async listOutputs(args) {
        return await this.api('listOutputs', args);
    }
    async relinquishOutput(args) {
        return await this.api('relinquishOutput', args);
    }
    async getPublicKey(args) {
        return await this.api('getPublicKey', args);
    }
    async revealCounterpartyKeyLinkage(args) {
        return await this.api('revealCounterpartyKeyLinkage', args);
    }
    async revealSpecificKeyLinkage(args) {
        return await this.api('revealSpecificKeyLinkage', args);
    }
    async encrypt(args) {
        return await this.api('encrypt', args);
    }
    async decrypt(args) {
        return await this.api('decrypt', args);
    }
    async createHmac(args) {
        return await this.api('createHmac', args);
    }
    async verifyHmac(args) {
        return await this.api('verifyHmac', args);
    }
    async createSignature(args) {
        return await this.api('createSignature', args);
    }
    async verifySignature(args) {
        return await this.api('verifySignature', args);
    }
    async acquireCertificate(args) {
        return await this.api('acquireCertificate', args);
    }
    async listCertificates(args) {
        return await this.api('listCertificates', args);
    }
    async proveCertificate(args) {
        return await this.api('proveCertificate', args);
    }
    async relinquishCertificate(args) {
        return await this.api('relinquishCertificate', args);
    }
    async discoverByIdentityKey(args) {
        return await this.api('discoverByIdentityKey', args);
    }
    async discoverByAttributes(args) {
        return await this.api('discoverByAttributes', args);
    }
    async isAuthenticated(args) {
        return await this.api('isAuthenticated', args);
    }
    async waitForAuthentication(args) {
        return await this.api('waitForAuthentication', args);
    }
    async getHeight(args) {
        return await this.api('getHeight', args);
    }
    async getHeaderForHeight(args) {
        return await this.api('getHeaderForHeight', args);
    }
    async getNetwork(args) {
        return await this.api('getNetwork', args);
    }
    async getVersion(args) {
        return await this.api('getVersion', args);
    }
}
//# sourceMappingURL=HTTPWalletJSON.js.map