import { PrivateKey, PublicKey, SymmetricKey } from '../primitives/index.js';
import { SecurityLevel } from '../wallet/Wallet.interfaces.js';
/**
 * Class responsible for deriving various types of keys using a root private key.
 * It supports deriving public and private keys, symmetric keys, and revealing key linkages.
 */
export default class KeyDeriver {
    rootKey: PrivateKey;
    /**
       * Initializes the KeyDeriver instance with a root private key.
       * @param {PrivateKey | 'anyone'} rootKey - The root private key or the string 'anyone'.
       */
    constructor(rootKey: PrivateKey | 'anyone');
    /**
       * Derives a public key based on protocol ID, key ID, and counterparty.
       * @param {[SecurityLevel, string]} protocolID - The protocol ID including a security level and protocol name.
       * @param {string} keyID - The key identifier.
       * @param {PublicKey | string | 'self' | 'anyone'} counterparty - The counterparty's public key or a predefined value ('self' or 'anyone').
       * @param {boolean} [forSelf=false] - Whether deriving for self.
       * @returns {PublicKey} - The derived public key.
       */
    derivePublicKey(protocolID: [SecurityLevel, string], keyID: string, counterparty: PublicKey | string | 'self' | 'anyone', forSelf?: boolean): PublicKey;
    /**
       * Derives a private key based on protocol ID, key ID, and counterparty.
       * @param {[SecurityLevel, string]} protocolID - The protocol ID including a security level and protocol name.
       * @param {string} keyID - The key identifier.
       * @param {PublicKey | string | 'self' | 'anyone'} counterparty - The counterparty's public key or a predefined value ('self' or 'anyone').
       * @returns {PrivateKey} - The derived private key.
       */
    derivePrivateKey(protocolID: [SecurityLevel, string], keyID: string, counterparty: PublicKey | string | 'self' | 'anyone'): PrivateKey;
    /**
       * Derives a symmetric key based on protocol ID, key ID, and counterparty.
       * Note: Symmetric keys should not be derivable by everyone due to security risks.
       * @param {[SecurityLevel, string]} protocolID - The protocol ID including a security level and protocol name.
       * @param {string} keyID - The key identifier.
       * @param {PublicKey | string | 'self' | 'anyone'} counterparty - The counterparty's public key or a predefined value ('self' or 'anyone').
       * @returns {SymmetricKey} - The derived symmetric key.
       * @throws {Error} - Throws an error if attempting to derive a symmetric key for 'anyone'.
       */
    deriveSymmetricKey(protocolID: [SecurityLevel, string], keyID: string, counterparty: PublicKey | string | 'self' | 'anyone'): SymmetricKey;
    /**
       * Reveals the shared secret between the root key and the counterparty.
       * Note: This should not be used for 'self'.
       * @param {PublicKey | string | 'self' | 'anyone'} counterparty - The counterparty's public key or a predefined value ('self' or 'anyone').
       * @returns {number[]} - The shared secret as a number array.
       * @throws {Error} - Throws an error if attempting to reveal a shared secret for 'self'.
       */
    revealCounterpartySecret(counterparty: PublicKey | string | 'self' | 'anyone'): number[];
    /**
       * Reveals the specific key association for a given protocol ID, key ID, and counterparty.
       * @param {PublicKey | string | 'self' | 'anyone'} counterparty - The counterparty's public key or a predefined value ('self' or 'anyone').
       * @param {[SecurityLevel, string]} protocolID - The protocol ID including a security level and protocol name.
       * @param {string} keyID - The key identifier.
       * @returns {number[]} - The specific key association as a number array.
       */
    revealSpecificSecret(counterparty: PublicKey | string | 'self' | 'anyone', protocolID: [SecurityLevel, string], keyID: string): number[];
    /**
       * Normalizes the counterparty to a public key.
       * @param {PublicKey | string | 'self' | 'anyone'} counterparty - The counterparty's public key or a predefined value ('self' or 'anyone').
       * @returns {PublicKey} - The normalized counterparty public key.
       * @throws {Error} - Throws an error if the counterparty is invalid.
       */
    private normalizeCounterparty;
    /**
       * Computes the invoice number based on the protocol ID and key ID.
       * @param {[SecurityLevel, string]} protocolID - The protocol ID including a security level and protocol name.
       * @param {string} keyID - The key identifier.
       * @returns {string} - The computed invoice number.
       * @throws {Error} - Throws an error if protocol ID or key ID are invalid.
       */
    private computeInvoiceNumber;
}
//# sourceMappingURL=KeyDeriver.d.ts.map