import { Wallet, Base64String, PubKeyHex, HexString, OutpointString, CertificateFieldNameUnder50Bytes } from '../wallet/Wallet.interfaces.js';
/**
 * Represents an Identity Certificate as per the Wallet interface specifications.
 *
 * This class provides methods to serialize and deserialize certificates, as well as signing and verifying the certificate's signature.
 */
export default class Certificate {
    /**
     * Type identifier for the certificate, base64 encoded string, 32 bytes.
     */
    type: Base64String;
    /**
     * Unique serial number of the certificate, base64 encoded string, 32 bytes.
     */
    serialNumber: Base64String;
    /**
     * The public key belonging to the certificate's subject, compressed public key hex string.
     */
    subject: PubKeyHex;
    /**
     * Public key of the certifier who issued the certificate, compressed public key hex string.
     */
    certifier: PubKeyHex;
    /**
     * The outpoint used to confirm that the certificate has not been revoked (TXID.OutputIndex), as a string.
     */
    revocationOutpoint: OutpointString;
    /**
     * All the fields present in the certificate, with field names as keys and field values as strings.
     */
    fields: Record<CertificateFieldNameUnder50Bytes, string>;
    /**
     * Certificate signature by the certifier's private key, DER encoded hex string.
    */
    signature?: HexString;
    /**
     * Constructs a new Certificate.
     *
     * @param {Base64String} type - Type identifier for the certificate, base64 encoded string, 32 bytes.
     * @param {Base64String} serialNumber - Unique serial number of the certificate, base64 encoded string, 32 bytes.
     * @param {PubKeyHex} subject - The public key belonging to the certificate's subject, compressed public key hex string.
     * @param {PubKeyHex} certifier - Public key of the certifier who issued the certificate, compressed public key hex string.
     * @param {OutpointString} revocationOutpoint - The outpoint used to confirm that the certificate has not been revoked (TXID.OutputIndex), as a string.
     * @param {Record<CertificateFieldNameUnder50Bytes, string>} fields - All the fields present in the certificate.
     * @param {HexString} signature - Certificate signature by the certifier's private key, DER encoded hex string.
     */
    constructor(type: Base64String, serialNumber: Base64String, subject: PubKeyHex, certifier: PubKeyHex, revocationOutpoint: OutpointString, fields: Record<CertificateFieldNameUnder50Bytes, string>, signature?: HexString);
    /**
     * Serializes the certificate into binary format, with or without a signature.
     *
     * @param {boolean} [includeSignature=true] - Whether to include the signature in the serialization.
     * @returns {number[]} - The serialized certificate in binary format.
     */
    toBin(includeSignature?: boolean): number[];
    /**
     * Deserializes a certificate from binary format.
     *
     * @param {number[]} bin - The binary data representing the certificate.
     * @returns {Certificate} - The deserialized Certificate object.
     */
    static fromBin(bin: number[]): Certificate;
    /**
     * Verifies the certificate's signature.
     *
     * @returns {Promise<boolean>} - A promise that resolves to true if the signature is valid.
     */
    verify(): Promise<boolean>;
    /**
     * Signs the certificate using the provided certifier wallet.
     *
     * @param {Wallet} certifier - The wallet representing the certifier.
     * @returns {Promise<void>}
     */
    sign(certifier: Wallet): Promise<void>;
}
//# sourceMappingURL=Certificate.d.ts.map